// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: animal.sql

package models

import (
	"context"
	"database/sql"
)

const createAnimal = `-- name: CreateAnimal :exec
INSERT INTO animal (nombre, especie, foto, sexo, edad_meses, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, NOW(), NOW())
`

func (q *Queries) CreateAnimal(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, createAnimal)
	return err
}

const deleteAnimal = `-- name: DeleteAnimal :exec
UPDATE animal
SET deleted_at = NOW()
WHERE id = $1
`

func (q *Queries) DeleteAnimal(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAnimal)
	return err
}

const getAnimalByID = `-- name: GetAnimalByID :one
SELECT id, nombre, especie, foto, sexo, edad_meses, created_at, updated_at
FROM animal
WHERE id = $1 AND deleted_at IS NULL
`

type GetAnimalByIDRow struct {
	ID        uint64
	Nombre    string
	Especie   string
	Foto      sql.NullString
	Sexo      string
	EdadMeses int32
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
}

func (q *Queries) GetAnimalByID(ctx context.Context) (GetAnimalByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getAnimalByID)
	var i GetAnimalByIDRow
	err := row.Scan(
		&i.ID,
		&i.Nombre,
		&i.Especie,
		&i.Foto,
		&i.Sexo,
		&i.EdadMeses,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAnimales = `-- name: GetAnimales :many
SELECT id, nombre, especie, foto, sexo, edad_meses, created_at, updated_at
FROM animal
WHERE deleted_at IS NULL
`

type GetAnimalesRow struct {
	ID        uint64
	Nombre    string
	Especie   string
	Foto      sql.NullString
	Sexo      string
	EdadMeses int32
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
}

func (q *Queries) GetAnimales(ctx context.Context) ([]GetAnimalesRow, error) {
	rows, err := q.db.QueryContext(ctx, getAnimales)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAnimalesRow
	for rows.Next() {
		var i GetAnimalesRow
		if err := rows.Scan(
			&i.ID,
			&i.Nombre,
			&i.Especie,
			&i.Foto,
			&i.Sexo,
			&i.EdadMeses,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAnimal = `-- name: UpdateAnimal :exec
UPDATE animal
SET nombre = $2, especie = $3, foto = $4, sexo = $5, edad_meses = $6, updated_at = NOW()
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) UpdateAnimal(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, updateAnimal)
	return err
}
