// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: animal_atributos.sql

package models

import (
	"context"
	"database/sql"
)

const createAnimalAtributo = `-- name: CreateAnimalAtributo :exec
INSERT INTO animal_atributos (animal_id, atributo_id, created_at, updated_at)
VALUES ($1, $2, NOW(), NOW())
`

func (q *Queries) CreateAnimalAtributo(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, createAnimalAtributo)
	return err
}

const deleteAnimalAtributo = `-- name: DeleteAnimalAtributo :exec
UPDATE animal_atributos
SET deleted_at = NOW()
WHERE id = $1
`

func (q *Queries) DeleteAnimalAtributo(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAnimalAtributo)
	return err
}

const getAnimalAtributosByAnimalID = `-- name: GetAnimalAtributosByAnimalID :many
SELECT id, animal_id, atributo_id, created_at, updated_at, deleted_at
FROM animal_atributos
WHERE animal_id = $1 AND deleted_at IS NULL
`

type GetAnimalAtributosByAnimalIDRow struct {
	ID         uint64
	AnimalID   int32
	AtributoID int32
	CreatedAt  sql.NullTime
	UpdatedAt  sql.NullTime
	DeletedAt  sql.NullTime
}

func (q *Queries) GetAnimalAtributosByAnimalID(ctx context.Context) ([]GetAnimalAtributosByAnimalIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getAnimalAtributosByAnimalID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAnimalAtributosByAnimalIDRow
	for rows.Next() {
		var i GetAnimalAtributosByAnimalIDRow
		if err := rows.Scan(
			&i.ID,
			&i.AnimalID,
			&i.AtributoID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAnimalAtributosByAtributoID = `-- name: GetAnimalAtributosByAtributoID :many
SELECT id, animal_id, atributo_id, created_at, updated_at, deleted_at
FROM animal_atributos
WHERE atributo_id = $1 AND deleted_at IS NULL
`

type GetAnimalAtributosByAtributoIDRow struct {
	ID         uint64
	AnimalID   int32
	AtributoID int32
	CreatedAt  sql.NullTime
	UpdatedAt  sql.NullTime
	DeletedAt  sql.NullTime
}

func (q *Queries) GetAnimalAtributosByAtributoID(ctx context.Context) ([]GetAnimalAtributosByAtributoIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getAnimalAtributosByAtributoID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAnimalAtributosByAtributoIDRow
	for rows.Next() {
		var i GetAnimalAtributosByAtributoIDRow
		if err := rows.Scan(
			&i.ID,
			&i.AnimalID,
			&i.AtributoID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAnimalAtributo = `-- name: UpdateAnimalAtributo :exec
UPDATE animal_atributos
SET animal_id = $2, atributo_id = $3, updated_at = NOW()
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) UpdateAnimalAtributo(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, updateAnimalAtributo)
	return err
}
